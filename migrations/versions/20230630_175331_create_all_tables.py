"""create all tables

Revision ID: fd504a46180e
Revises: ffdc0a98111c
Create Date: 2023-06-30 17:53:31.092728

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")


# revision identifiers, used by Alembic.
revision = 'fd504a46180e'
down_revision = 'ffdc0a98111c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tag_name', sa.String(
                        length=100), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('follows',
                    sa.Column('following_user_id',
                              sa.Integer(), nullable=False),
                    sa.Column('followed_user_id',
                              sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['followed_user_id'], ['users.id'], ),
                    sa.ForeignKeyConstraint(
                        ['following_user_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint(
                        'following_user_id', 'followed_user_id')
                    )
    op.create_table('questions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('question', sa.String(
                        length=1000), nullable=False),
                    sa.Column('owner_id', sa.Integer(), nullable=False),
                    sa.Column('tag_id', sa.Integer()),
                    sa.Column('created_at', sa.Date(), nullable=False),
                    sa.Column('updated_at', sa.Date(), nullable=False),
                    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
                    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('answers',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('body', sa.String(length=1000), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('question_id', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.Date(), nullable=False),
                    sa.Column('updated_at', sa.Date(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['question_id'], ['questions.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('tags_questions',
                    sa.Column('tag_id', sa.Integer(), nullable=False),
                    sa.Column('questions_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['questions_id'], ['questions.id'], ),
                    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
                    sa.PrimaryKeyConstraint('tag_id', 'questions_id')
                    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('first_name', sa.String(length=50), nullable=False))
        batch_op.add_column(
            sa.Column('last_name', sa.String(length=50), nullable=False))

    if environment == "production":
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('last_name')
        batch_op.drop_column('first_name')

    op.drop_table('tags_questions')
    op.drop_table('answers')
    op.drop_table('questions')
    op.drop_table('follows')
    op.drop_table('tags')
    # ### end Alembic commands ###
